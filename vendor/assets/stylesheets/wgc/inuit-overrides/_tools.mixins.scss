@mixin wgc-media-query($mq) {
  $breakpoint-found: false;

  @each $wgc-breakpoint in $wgc-breakpoints {
    $alias:     nth($wgc-breakpoint, 1);
    $condition: nth($wgc-breakpoint, 2);

    @if $mq == $alias and $condition {
      $breakpoint-found: true;
      @media #{$condition} {
        @content;
      }
    }
  }

  @if $breakpoint-found == false{
    @warn "Oops! Breakpoint ‘#{$mq}’ does not exist."
  }
}

@mixin layout-with-gutter($modifier, $modifier-value, $wgc-breakpoint) {
  .#{$inuit-layout-namespace}#{$wgc-breakpoint}layout#{$modifier},
  %#{$inuit-layout-namespace}#{$wgc-breakpoint}layout#{$modifier} {
    list-style: none;
    margin: 0;
    margin-left: 0;
    padding: 0;


    > .#{$inuit-layout-namespace}#{$wgc-breakpoint}layout__item,
    > %#{$inuit-layout-namespace}#{$wgc-breakpoint}layout__item {
      display: inline-block;
      padding-left: 0;
      padding-right: $modifier-value;

      vertical-align: top;
      width: 100%;

      @if $inuit-global-border-box == false {
          -webkit-box-sizing: border-box;
             -moz-box-sizing: border-box;
                  box-sizing: border-box;
      }
    }

    > .#{$inuit-layout-namespace}#{$wgc-breakpoint}layout__item--center,
    > %#{$inuit-layout-namespace}#{$wgc-breakpoint}layout__item--center {
      padding-left:  $modifier-value / 2;
      padding-right: $modifier-value / 2;
    }
  }
}

@mixin wgc-widths($inuit-widths-denominator, $wgc-breakpoint: null) {
  @if ($inuit-widths-denominator == 1) {
    .#{$inuit-widths-namespace}#{$wgc-breakpoint}one-whole {
      width: 100%;
    }

  } @else {

    @for $inuit-widths-numerator from 1 to $inuit-widths-denominator {
      .#{$inuit-widths-namespace}#{$wgc-breakpoint}#{numerator-to-word($wgc-widths-columns-responsive, $inuit-widths-numerator)}-#{denominator-to-word($wgc-widths-columns-responsive, $inuit-widths-numerator, $inuit-widths-denominator)} {
        width: ($inuit-widths-numerator / $inuit-widths-denominator) * 100% !important;
      }

      .#{$inuit-widths-namespace}#{$wgc-breakpoint}offset-#{numerator-to-word($wgc-widths-columns-responsive, $inuit-widths-numerator)}-#{denominator-to-word($wgc-widths-columns-responsive, $inuit-widths-numerator, $inuit-widths-denominator)} {
        margin-left: ($inuit-widths-numerator / $inuit-widths-denominator) * 100% !important;
      }
    }
  }
}
